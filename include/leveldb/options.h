// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <stddef.h>
#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
/**
 * levedb 的内容是一个块集合，每个块包含了一系列 <key,value> 对。
 *
 * 每个块在存储到文件之前可以进行压缩，下面这个枚举定义的就是 leveldb 支持的全部压缩类型。
 *
 * 注意一旦类型确定并且使用过了，就不要再修改每个枚举值了，否则压缩过的块就没法解压了。
 */
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression     = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
/**
 * 下面这个结构体定义了传给 DB::Open 函数用于控制数据库行为的配置。
 */
struct LEVELDB_EXPORT Options {
  // -------------------
  // Parameters that affect behavior
  /**
   * 下面这部分是影响行为的配置参数
   */

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  /**
   * Comparator 用于定义跳跃表里面 key 的顺序，默认采用的是针对 key 逐个字节按字典序比较。
   *
   * 注意，使用者所提供的 comparator 要做到两个确保：
   *
   * 针对同一个 DB，使用者提供的 comparator 的名字每一次都要相同；
   *
   * 针对同一个 DB，使用者提供的 comparator 的排序行为每一次都要相同。
   */
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // Default: false
  /**
   * 如果值为 true，如果数据库不存在则会自动创建。
   * 默认为 false。
   */
  bool create_if_missing;

  // If true, an error is raised if the database already exists.
  // Default: false
  /**
   * 如果值为 true，如果数据库已经存在则会触发异常。
   * 默认为 false。
   */
  bool error_if_exists;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // Default: false
  /**
   * 如果值为 true，底层实现将会采取比较激进的方式针对数据进行检查，一旦检测到任何错误就会停止处理。
   *
   * 这个配置可能会导致无法预料的后果：
   *
   * 比如，DB 中某一项出问题就可能导致大量的数据项变为不可读或者导致整个 DB 变为不可打开的。
   *
   * 默认为 false。
   */
  bool paranoid_checks;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  /**
   * 使用一个指定的对象与 DB 外部环境进行交互，比如针对文件读写、后台任务调度等等指定相关的行为。
   *
   * 默认为 Env::Default()
   */
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // Default: nullptr
  /**
   * 由 DB 生成的任何内部的进展、异常信息都可以写到 info_log。
   *
   * 如果该配置不为空，写到配置的目的地；如果为空，则日志文件会被放到 DB 内容文件所在目录。
   *
   * 默认为 nullptr
   */
  Logger* info_log;

  // -------------------
  // Parameters that affect performance
  /**
   * 下面这部分是影响性能的参数
   */

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  //
  // Default: 4MB
  /**
   * 磁盘上的无序 log 文件对应的内存大小，超过这个值，无序文件会被转换为有序文件并写到磁盘。
   *
   * 这个值越大性能越好，尤其后期要进行大块数据加载时（每个文件越大，则需要打开的文件数越少，数据越集中）。
   * 同一时刻，最多会有两个写缓存被使用，所以你可能想要调整这个值的大小以控制内存使用。另外，写缓存越大也会导致下一次打开
   * 数据库时需要花费更多的时间来恢复数据。（？）
   *
   * 这个值默认为 4MB
   */
  size_t write_buffer_size;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  //
  // Default: 1000
  /**
   * DB 可以打开的最大文件个数。如果你的数据库数据量比较大，你可能想要增大这个值（假设每个文件 2MB，然后用数据量除以它，就是你要的最大文件个数）。
   *
   * 默认值为 1000
   */
  int max_open_files;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // Default: nullptr
  /**
   * 用户数据被存到一组 blocks 中，block 就是从磁盘读数据时的最小单位。下面这个值可以控制 blocks 相关的缓存大小。
   *
   * 如果该值为非空，则针对 blocks 使用用户指定的 cache；如果为空，leveldb 将会自动创建一个大小为 8MB 的缓存。
   *
   * 默认值为 nullptr
   */
  Cache* block_cache;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  //
  // Default: 4K
  /**
   * 每个 block 的近似大小。注意，这个参数指的是压缩前的数据大小。
   *
   * 如果 block 写入磁盘时被压缩了，则后续从磁盘加载 block 时，数据大小要小于这里的值。
   *
   * 默认值为 4K
   */
  size_t block_size;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  //
  // Default: 16
  /**
   * 两个 restart points 之间 keys 的个数，restart point 用于差分编码（差分編碼的簡單例子
   * 是儲存序列式資料之間的差異（而不是儲存資料本身）：不存「2, 4, 6, 9, 7」，而是存「2, 2, 2, 3, -2」。
   * 單獨使用用處不大，但是在序列式數值常出現時可以幫助壓縮資料。 ）。
   *
   * 这个参数可以动态进行调整。大部分情况下不需要修改这个值。
   *
   * 默认值为 16
   */
  int block_restart_interval;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  //
  // Default: 2MB
  /**
   * leveldb 最多写入 max_file_size 个字节到一个文件中，超过这个值就会关闭当前文件然后写下一个新的文件。
   *
   * 大多数情况下不需要修改这个值。但是如果你的文件系统在大文件下效率更高，你可以考虑增大这个值。这个值变大会有个缺点，
   * 即文件 compaction 耗时更多从而导致性能波动。另一个增大该值的理由是，你要操作的数据库非常大。
   *
   * 默认值为 2MB
   */
  size_t max_file_size;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  /**
   * 下面这个值可以让你用指定的压缩算法来对 blocks 进行压缩，这个参数也可以动态进行调整。
   *
   * 默认值为 kSnappyCompression，这个算法在压缩比和压缩速度上做到了很好的均衡。
   * kSnappyCompression 在英特尔酷睿双核 2.4GHz 机器上可以做到大约 200-500MB/s 的压缩速度和大约 400-800MB/s 的解压缩速度。
   * 注意这两个速度要显著地快于大多数持久化存储的读写速度，因此没有必要把压缩算法切换到不进行压缩的 kNoCompression。即使输入数据是非压缩的，
   * kSnappyCompression 算法实现也会高效地检测到这一点然后自动切换到非压缩模式。
   */
  CompressionType compression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  /**
   * 试验特性：如果该值为真，打开数据库时会把数据追加到已存在的 MANIFEST 和 log 文件。这个特效可以加速 open 操作。
   *
   * 默认值为 false，后续版本可能会变为 true。
   */
  bool reuse_logs;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  //
  // Default: nullptr
  /**
   * 如果该值为非空，将会使用指定的过滤策略来减少磁盘读操作。大多数应用将会从传递 NewBloomFilterPolicy() 给该值中获益。
   *
   * 默认值为 nullptr
   */
  const FilterPolicy* filter_policy;

  // Create an Options object with default values for all fields.
  /**
   * 使用各个参数的默认值创建一个 Option 对象
   */
  Options();
};

// Options that control read operations
/**
 * 控制读操作的配置
 */
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // Default: false
  /**
   * 如果该值为真，从底层存储中读取的全部数据将会被进行校验，然后与对应的校验和进行对比。
   *
   * 默认值为 false
   */
  bool verify_checksums;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // Default: true
  /**
   * 该参数控制本次读取的数据是否被缓存到内存中。
   *
   * 针对块扫描，调用者可能希望把该参数设置为 false。
   *
   * 默认值为 true
   */
  bool fill_cache;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // Default: nullptr
  /**
   * 如果该参数为非空，则从快照中进行读取（注意该快照需要隶属于正在被读取的 DB，并且该快照未被释放）。如果该参数为空，
   * 则隐式地使用一个从本次读操作开始的数据库状态的快照。（？）
   */
  const Snapshot* snapshot;

  ReadOptions()
      : verify_checksums(false),
        fill_cache(true),
        snapshot(nullptr) {
  }
};

// Options that control write operations
/**
 * 控制写操作的配置
 */
struct LEVELDB_EXPORT WriteOptions {
  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  //
  // Default: false
  /**
   * 如果该参数为 true，每一次写操作完成前，相关操作系统缓存就会被 flush 到磁盘（通过调用 WritableFile::Sync()）。
   * 该参数为 true 时，写操作会比较慢。
   *
   * 如果该参数为 false，而且机器宕机了，最近的写操作可能会被丢失。注意，如果仅仅是进程崩溃（机器没有被重启），即使该参数为 false 也不会丢数据。
   *
   * 换句话说，一个 DB 写操作在该参数为 false 时的崩溃语义等同于系统调用 write()，一个 DB 写操作在该参数为 true 时的崩溃语义等同于后跟一个
   * fsync() 的系统调用 write()。
   *
   * 默认值为 false
   */
  bool sync;

  WriteOptions()
      : sync(false) {
  }
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
